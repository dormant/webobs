#!/usr/bin/env perl
#
# Perl script to serve a web page to view seismic plot files in
# a convenient form
#
# Version 1.1, for webobs installation
# Version 1.2, adds pan_plot functionality
# Version 1.3, larger fonts for Blackberriers in concise mode
# Version 2.0, tidied up lots
# Version 3.0, totally rewritten for updated seismic monitoring system
# Version 3.1, Interim release, 2023-06-02
# Version 3.2, Interim non-release, 2023-06-06
# Version 4.0, Massive restructuring, to work properly, but limited functionality, 2023-06-13
#
# Rod Stewart, UWI/SRC/MVO
#
#
# The call to this is in /mvo/webobs/CONFIG/MENU.config

use strict;
use warnings;
use Time::Local;
use File::Basename;
use Sys::Hostname;
use CGI;                      
use CGI qw/:standard/;
use CGI::Carp qw/fatalsToBrowser/;

my $hostname;			# Machine being run on, set to either 'webobs' or 'opsproc3'
$hostname = hostname();

my $debug;			# extra output for debugging
my $output;			# output format
if( $hostname eq 'opsproc3' ) {
    $debug = 1;
    $output = 'text';
} else {
    $debug = 0;
    $output = 'html';
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Directories and file
#
my $dir_data; 			# Where we look for data in file hierarchy
my $dir_dbfile; 		# Location of mlocate databases 
my $locateExe; 		    # Locate executable to be used
my $dbfile;
my $file_holdings;	    # File with list of stations and channels for each plot type


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Variables
#
# Variables used in searching for plots
#
my $station_to_plot;
my $station_search_string;
my $date_to_plot;
my $dateda;
my $datemo;
my $dateyr;
my $plot_type;         
my $layout;			# "normal" or "mobile" or "summary"
my $share_data;			# where data is shared, usually two choices


# Choices for above variables
#
if( $hostname eq 'opsproc3' ){
    $locateExe = '/usr/bin/locate';
} else {
    $locateExe = '/usr/bin/mlocate -q';
}


my @layouts = qw( normal mobile summary );

my @plot_types = qw( heli helisp heliwide helimulti sgram pan heliscan helidisp infra vlp strain strainpan);
my %plot_types_nice = (	'heli' => 'Helicorder',
			'helisp' => 'Short-period helicorder',
			'sgram' => 'Spectrogram',
			'pan' => 'Pan plot (1996-2019)',
			'heliwide' => 'Wide helicorder (2020-today)',
			'helimulti' => 'Multiple helicorder (2014-yesterday)',
			'heliscan' => 'Scanned helicorder (1995-1996)',
			'helidisp' => 'Displacement helicorder (2009-today)',
			'infra' => 'Infrasound helicorder (2009-2020)',
			'vlp' => 'Very-long period seismic data plot (2021-yesterday)',
			'strain' => 'Strain (2018,2022-today)',
			'strainpan' => 'Strain pan plot(2008-2018)');


# Start new CGI thing
my $q;
if( not $debug ){
    $q = CGI->new;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Set variables
#
if( $debug ) {
    ($plot_type, $date_to_plot, $station_to_plot) = @ARGV;
} else {
    $station_to_plot = $q->param('sta');
    $date_to_plot = $q->param('date');
    $dateda = $q->param('dateda');
    $datemo = $q->param('datemo');
    $dateyr = $q->param('dateyr');
    if( defined $dateda ) {
        $date_to_plot = join( '', $dateyr, $datemo, $dateda );
    }
    $plot_type = $q->param('what');
    $layout = $q->param('layout');
}


# Defaults
#
if( not defined $plot_type ) {
    $plot_type = 'heli';
}
if( not defined $layout ) {
    $layout= 'normal';
}
if( not defined $date_to_plot ) {
    $date_to_plot = 'today';
}

my %default_stations_to_plot = (	'heli' 		=> 'MBLY',
                                    'helisp' 	=> 'MBLY',
                                    'heliwide' 	=> 'MBLY',
                                    'sgram' 	=> 'MBLY',
                                    'pan' 		=> 'MBLY',
                                    'helimulti' => 'MSS1_MBLY_MBBY_MBGH_MBFL',
                                    'heliscan' 	=> 'MGHZ',
                                    'helidisp' 	=> 'MBLY',
                                    'infra' 	=> 'MBFL',
					                'vlp'	    => 'V',
					                'strain'	=> 'AIRS',
					                'strainpan'	=> 'tr' );
					
if( not defined $station_to_plot ) {
	$station_to_plot = $default_stations_to_plot{ $plot_type };
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Get stations and channels for this plot type
#
if( $hostname eq 'opsproc3' ){
    $file_holdings = './holdings.txt';
    $dir_dbfile = '.';
} else {
    $file_holdings = '/home/webobs/src/seismic_plot_viewer/holdings.txt';
    $dir_dbfile = '/home/webobs/src/seismic_plot_viewer';
}

open my $handle, '<', $file_holdings;
chomp( my @lines = <$handle> );
close $handle;

my %holdings;

# Fiddle for SP and infra helis
my $plot_type_fiddle = $plot_type;
if( $plot_type eq 'helisp' ){
    $plot_type_fiddle = 'heli';
}

foreach my $line( @lines ) {
		
	my @chunks = split /\s+/, $line;

	if( $chunks[0] eq $plot_type_fiddle) {

        push( @{ $holdings{$chunks[1]} }, $chunks[2] );

	}

}
if( $debug ){
    print "hostname: $hostname\n";
	print "plot_type: ", $plot_type, "\n";
	print "station_to_plot: ", $station_to_plot, "\n";
	print "date_to_plot: ", $date_to_plot, "\n";
    print "layout: ", $layout, "\n";
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Check if variables are in scope
#
die( "Bad plot type: $plot_type" ) unless( grep { $_ eq $plot_type } @plot_types ); 
die( "Bad layout: $layout " ) unless( grep { $_ eq $layout} @layouts ); 

# Catch bad station when changing plot_type
unless ( grep {$_ eq $station_to_plot } ( keys %holdings ) ) {
	$station_to_plot = $default_stations_to_plot{ $plot_type };
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Display holdings
#
if( $debug ){

    foreach my $key (sort keys %holdings){
        print "$key: @{$holdings{$key}}\n";
    }
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Variables used in output
my $web_start_page = '/cgi-bin/seismic_plot_viewer.cgi';
my $title = 'Seismic Plots'; 
my $gap;			# Gaps used when listing header elements
my $lgap;			# Number of spaces in a gap
my $break;			# New line
my $marker;			# Symbol to marker header element in use
my $space;			# Single space
my $plot_width;      		# Width of plot on page
my $days_to_show;		# Number of days to offer as links
my @dates = ();

if( $layout eq 'mobile' ) {
	$lgap = 1;
} else {
	$lgap = 2;
}

if( $output eq 'text' ) {
	$break = "\n";
	$marker = '*';
	$space = ' ';
 	$gap = $space x $lgap;
} else {
	$break = "\n<BR>\n";
	$marker = '<FONT COLOR="#FF0000">*</FONT>';
	$space = '&nbsp;';
 	$gap = $space x $lgap;
}

if( $plot_type eq 'pan' || $plot_type eq 'strainpan' ) {
	$plot_width = 852;
} else {
	$plot_width = 500;
}

if( $layout eq 'normal' ) {
	$days_to_show = 11;
} else {
	$days_to_show = 11;
}
	

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Get todays date and time (UTC)
#
my ($year, $month, $day) = (gmtime())[5,4,3];
$year = 1900 + $year;
$month++;
my $today = sprintf( '%04s%02s%02s', $year, $month, $day );
if( $date_to_plot eq 'today' ) {
	$date_to_plot = $today;
}
if( $debug ) {
    print "date_to_plot: $date_to_plot\n";
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Set up arrays for select menus
#
my $years_in_dir = ($year - 1995 + 1);
my @months = qw( 01 02 03 04 05 06 07 08 09 10 11 12 );
my @days = qw( 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 );
my @years = ();
for( my $i=$year; $i>$year-$years_in_dir; $i-- ) {
	push( @years, sprintf( '%04s', $i ) );
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Set up share directories for search
#
my @shares_data;
if( $hostname eq 'opsproc3' ) {
	@shares_data = qw( /mnt/earthworm3/monitoring_data /mnt/mvofls2/Seismic_Data/monitoring_data );
} else {
	@shares_data = qw( /mnt/earthworm00/monitoring_data /mnt/mvofls2/Seismic_Data/monitoring_data );
}

my %plot_type_dirs = ( 	'heli' => 'helicorder_plots',
			'helisp' => 'helicorder_plots',
			'heliwide' => 'helicorder_plots_wide',
			'sgram' => 'sgram',
			'pan' => 'pan_plots',
			'helimulti' => 'helicorder_plots_multi',
			'heliscan' => 'helicorder_plots_scanned',
			'helidisp' => 'helicorder_plots_displacement',
			'infra' => 'helicorder_plots',
            'strain' => 'strain_plots',
            'strainpan' => 'strain_pan_plots',
            'vlp' => 'vlp_plots' );




# Search string for station
#
my @stachans_to_search = @{$holdings{$station_to_plot}};
if( $plot_type eq 'helisp' ) {
    @stachans_to_search = grep { /(SHZ|EHZ|MHZ)/ } @stachans_to_search;
}elsif( $plot_type eq 'infra' ) {
    @stachans_to_search = grep { /(EDF|HDF|PR1)/ } @stachans_to_search;
}

if( scalar( @stachans_to_search ) > 1 ) {
   $station_search_string = join( '|', @stachans_to_search );
   $station_search_string = join( '', '(', $station_search_string, ')' );
} else {
   $station_search_string = $stachans_to_search[0];
}

if( $debug ) {
    print "station_search_string: $station_search_string\n";
}
        

# array of found image files
#
my @image_files = ();
my @image_files_all_sta = ();


# Search over all shares
#

for $share_data (@shares_data) {

	# Search directory based on plot type
	$dir_data = join( '/', $share_data, $plot_type_dirs{ $plot_type } );

	# Appropriate mlocate database
	$dbfile = join( '/', $dir_data, '.dbfile' );
	$dbfile =~ s/^\///;
	$dbfile =~ s/\/\./\./;
	$dbfile =~ s/\//_/g;
	$dbfile = join( '/', $dir_dbfile, $dbfile );

	# Find matching image files 
	my $command;
	if( $layout eq 'summary' ) {
		$command = join( ' ', $locateExe, '-d', $dbfile, '--regex -i', 
			'".*(\.gif|\.png)"' );
	} else {
        if( $plot_type eq 'strain' ) {
		    $command = join( ' ', $locateExe, '-d', $dbfile, '--regex -i', 
			    join( '',  '".*', $date_to_plot, '.*\.', $station_search_string, '.*(\.gif|\.png)"' ) );
        } elsif( $plot_type eq 'strainpan' ) {
		    $command = join( ' ', $locateExe, '-d', $dbfile, '--regex -i', 
			    join( '',  '".*', $station_search_string, '\.', $date_to_plot, '\.png"' ) );
        } elsif( $plot_type eq 'helimulti' ) {
		    $command = join( ' ', $locateExe, '-d', $dbfile, '--regex -i', 
			    join( '',  '".*', $station_search_string, '\.', $date_to_plot, '.*(\.gif|\.png)"' ) );
        } else {
		    $command = join( ' ', $locateExe, '-d', $dbfile, '--regex -i', 
			    join( '',  '".*', $station_search_string, '.*', $date_to_plot, '.*(\.gif|\.png)"' ) );
        }
	}
    if( $debug ){
        print "$command \n";
    }
	my @image_files_part = `$command`;
	chomp @image_files_part;
	push( @image_files, @image_files_part );

    $command = join( ' ', $locateExe, '-d', $dbfile, '--regex -i', 
			    join( '',  '".*', $date_to_plot, '.*(\.gif|\.png)"' ) );
	@image_files_part = `$command`;
	chomp @image_files_part;
	push( @image_files_all_sta, @image_files_part );
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Find unique files in different directories CAN'T USE uniq on webobs perl
#
if( $plot_type eq 'helisp' ) {
    @image_files_all_sta= grep { /(SHZ|EHZ|MHZ)/ } @image_files_all_sta;
    @image_files= grep { /(SHZ|EHZ|MHZ)/ } @image_files;
}elsif( $plot_type eq 'infra' ) {
    @image_files_all_sta= grep { /(EDF|HDF|PR1)/ } @image_files_all_sta;
    @image_files= grep { /(EDF|HDF|PR1)/ } @image_files;
}elsif( $plot_type eq 'heli' ) {
    @image_files_all_sta= grep { /(BHZ|HHZ|SHZ)/ } @image_files_all_sta;
    @image_files= grep { /(BHZ|HHZ|SHZ)/ } @image_files;
}
my $n_image_files = scalar( @image_files );
if( $n_image_files > 1 ) {
	my @image_files_uniq = ();
	my @filenames = ();
	foreach my $fullfilename ( @image_files ) {
		my $filename = basename( $fullfilename );	
		unless( grep {$_ eq $filename } @filenames) {
			push( @filenames, $filename );
			push( @image_files_uniq, $fullfilename );
		}
	}
	@image_files = @image_files_uniq;
}

#### MASSIVE CLUDGE
#
# If you have a pair of BB and SP, drop the SP
my @image_files_tmp = @image_files;
foreach my $file (@image_files_tmp){
    if (index($file, 'BHZ') != -1) {
        $file =~ s/BHZ/SHZ/;
        @image_files = grep {!/$file/} @image_files;
    } elsif (index($file, 'HHZ') != -1) {
        $file =~ s/HHZ/EHZ/;
        @image_files = grep {!/$file/} @image_files;
    }
}
#
#### END OF MASSIVE CLUDGE
			
$n_image_files = scalar( @image_files );
if( $debug ) {
    print "n_image_files: $n_image_files\n";
    foreach my $file (@image_files){
        print "file: $file\n";
    }
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Output
#


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# start
#
if( $output eq 'html' ) {
    print $q->header, "\n";
    if( $date_to_plot eq $today ) {
        my $content = join( '', '60,', $web_start_page, '?sta=', $station_to_plot, '&what=', $plot_type );
	    print $q->start_html( -title => $title, -head => $q->meta( {-http_equiv=>'REFRESH',-content=>$content}) ), "\n";
    } else {
	    print $q->start_html( -title => $title ), "\n";
    }
	print "<TT>\n";
} else {
	print $title, "\n";
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Debugging output
#
if( $debug ) {

	print "dbfile: ", $dbfile, "\n";
	print $break;
	print "station_to_plot: ", $station_to_plot, "\n";
	print $break;
	print "date_to_plot: ", $date_to_plot, "\n";
	print $break;
	print $break;
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Form with inputs for plot types and date
#
if( $output eq 'html' ) {
		print $q->start_form( -action => $web_start_page, -method => 'post' ), "\n";
		print $q->popup_menu( -name => 'what', -values => \@plot_types, -labels => \%plot_types_nice, -default=>$plot_type);
		print $gap;
		print $q->popup_menu( -name => 'dateda', -values => \@days, -default=>substr($date_to_plot,6,2));
		print $q->popup_menu( -name => 'datemo', -values => \@months, -default=>substr($date_to_plot,4,2));
		print $q->popup_menu( -name => 'dateyr', -values => \@years, -default=>substr($date_to_plot,0,4));
		print $gap;
		print $q->submit( -name => 'submit' );
		print $gap;
		print $gap;
		print $gap;
        print $q->a({href=>$web_start_page}, 'RESET');
		print $gap;
        #print $q->hidden( -name => "sta", -default => $station_to_plot, -override => 1 );
        print $q->hidden( -name => "sta", -value => $station_to_plot );
		print $q->end_form, "\n";
		print $q->hr(), "\n";
} else {
	print "Form for: Plot Network Date\n";
}



#my @stations_to_plot = sort keys %holdings;
my @stations_to_plot = ();
foreach my $fullfilename ( @image_files_all_sta ) {
	my $filename = basename( $fullfilename );	
    my $sta;
    my $scn;
    if( $plot_type eq 'strain' ){
       my @bits = split /\./, $filename;
        $sta = $bits[2];
    } elsif( $plot_type eq 'strainpan' ){
       my @bits = split /\./, $filename;
        $sta = $bits[0];
    } elsif( $plot_type eq 'vlp' ){
       my @bits = split /\./, $filename;
        $sta = $bits[1];
    } elsif( $plot_type eq 'helimulti' ){
       my @bits = split /\./, $filename;
        $sta = $bits[0];
    } else {
       my @bits = split /_/, $filename;
        $sta = $bits[0];
    }
	unless( grep {$_ eq $sta } @stations_to_plot) {
			push( @stations_to_plot, $sta);
	}
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# print stations
#
my @stations_to_plot_MVO;
my @stations_to_plot_Oth;

if( $plot_type eq 'heli' || $plot_type eq 'heliwide' || $plot_type eq 'sgram' || $plot_type eq 'helisp' ){
    @stations_to_plot_MVO = grep { /^M(B|S)/ } @stations_to_plot;
    my %second = map {$_=>1} @stations_to_plot_MVO;
    @stations_to_plot_Oth = grep { !$second{$_} } @stations_to_plot;

    if( $layout eq 'normal' ) {
        print "MVO station:", $gap;
    }
    if( scalar( @stations_to_plot_MVO) == 0 ){ 
        print "none";
    }

    foreach my $st (@stations_to_plot_MVO) {

	    my $link = sprintf( "%s?sta=%s&date=%s&what=%s&layout=%s", 
			    $web_start_page, $st, $date_to_plot, $plot_type, $layout);

	    if( $station_to_plot eq $st ) {
		    print $marker;
	    } else {
		    print $space;
	    }
	    if( $output eq 'text' ){
		    print $st; 
	    } else {
		    print $q->a({href=>$link},$st);
	    }
	    if( $station_to_plot eq $st ) {
		    print $marker;
	    } else {
		    print $space;
	    }
	    print $gap;
	    if( $output eq 'html' ) {
		    print "\n";
	    }
    }
    print $break;

    if( $layout eq 'normal' ) {
        print "Other station:", $gap;
    }
    if( scalar( @stations_to_plot_Oth) == 0 ){ 
        print "none";
    }

    foreach my $st (@stations_to_plot_Oth) {

	    my $link = sprintf( "%s?sta=%s&date=%s&what=%s&layout=%s", 
			    $web_start_page, $st, $date_to_plot, $plot_type, $layout );

	    if( $station_to_plot eq $st ) {
		    print $marker;
	    } else {
		    print $space;
	    }
	    if( $output eq 'text' ){
		    print $st; 
	    } else {
		    print $q->a({href=>$link},$st);
	    }
	    if( $station_to_plot eq $st ) {
		    print $marker;
	    } else {
		    print $space;
	    }
	    print $gap;
	    if( $output eq 'html' ) {
		    print "\n";
	    }
    }
    print $break;


} else {

    if( $layout eq 'normal' ) {
        print "Station:", $gap;
    }
    if( scalar( @stations_to_plot) == 0 ){ 
        print "none";
    }

    foreach my $st (@stations_to_plot) {

	    my $link = sprintf( "%s?sta=%s&date=%s&what=%s&layout=%s", 
			    $web_start_page, $st, $date_to_plot, $plot_type, $layout );

	    if( $station_to_plot eq $st ) {
		    print $marker;
	    } else {
		    print $space;
	    }
	    if( $output eq 'text' ){
		    print $st; 
	    } else {
		    print $q->a({href=>$link},$st);
	    }
	    if( $station_to_plot eq $st ) {
		    print $marker;
	    } else {
		    print $space;
	    }
	    print $gap;
	    if( $output eq 'html' ) {
		    print "\n";
	    }
    }
    print $break;

    }


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Set dates as serial numbers
#
my $sec_in_day = 60 * 60 * 24;
$year = substr( $today, 0, 4 );
$month = substr( $today, 4, 2 );
$day = substr( $today, 6, 2 );
my $daynum_today = int( timegm(0,0,0,$day,$month-1,$year-1900) / $sec_in_day );
$year = substr( $date_to_plot, 0, 4 );
$month = substr( $date_to_plot, 4, 2 );
$day = substr( $date_to_plot, 6, 2 );
my $daynum_date_to_plot = int( timegm(0,0,0,$day,$month-1,$year-1900) / $sec_in_day );

my $days_ahead = ($daynum_today - $daynum_date_to_plot);
if( $days_ahead > int( $days_to_show/2 ) ) {
	$days_ahead = int( $days_to_show/2 );
}

for(my $i=0;$i<$days_to_show;$i++) {
	my $iday = $daynum_date_to_plot + $days_ahead - $i;
	my ($year, $month, $day) = (gmtime($iday*$sec_in_day))[5,4,3];
	$year = 1900 + $year;
	$month++;
	my $date = sprintf( '%04s%02s%02s', $year, $month, $day );
	
	$dates[$i] = $date;
}
if( $dates[0] ne $today ) {
	@dates = ($today,@dates);
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# print dates for all layouts
#
if( $layout eq 'normal' ) {
	print "Date:", $gap;
}

foreach my $date ( @dates ) {

	my $link = sprintf( "%s?sta=%s&date=%s&what=%s&layout=%s", 
			$web_start_page, $station_to_plot, $date, $plot_type, $layout );

    my $month = substr( $date, 4, 2 );
    my $day = substr( $date, 6, 2 );
	my $date_nice = join ( '/', $day, $month );
    if( $date eq $today ){
        $date_nice = 'today';    
    }

	if( $date eq $date_to_plot) {
		print $marker;
	} else {
		print $space;
	}
	if( $output eq 'text' ) {
		print $date_nice;
	} else {
		print $q->a({href=>$link},$date_nice);
	}
	if( $date eq $date_to_plot) {
		print $marker;
	} else {
		print $space;
	}
	print $gap;
	if( $output eq 'html' ) {
		print "\n";
	}
}
print $break;
print "<HR>\n";



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# Images 
#
if( $date_to_plot eq $today ) {
    print "This page refreshes automatically every minute.", $break;
    # Debugging
    #print "URI: $ENV{'REQUEST_URI'}\n", $break;
}


# show image file(s)
if( $n_image_files == 0 ) {
	print "No matching image files found", $break, "\n";
} else {
	foreach my $image_file ( @image_files ) {
		if( $output eq 'text' ){
			print $image_file, "\n";
		} else {
			my $image_file_web = $image_file;
			if( index( $image_file_web, 'earthworm00' ) != -1 ) {
                # notWebobs and Webobs have differing mount points
                if( $ENV{'SERVER_PORT'} eq '8080' ){
                    $image_file_web =~ s/^.*monitoring_data/\/earthworm00/;
                } else {
                    $image_file_web =~ s/^.*monitoring_data/\/monitoring/;
                }
			} else {
                if( $ENV{'SERVER_PORT'} eq '8080' ){
                    $image_file_web =~ s/^.*monitoring_data/\/mvofls2\/monitoring_data/;
                } else {
                    $image_file_web =~ s/^.*monitoring_data/\/seismic\/monitoring_data/;
                }
			}

            if( scalar(@image_files) > 1 ) {
                print $q->a({href=>$image_file_web}, img {src=>$image_file_web, align=>"LEFT", width=>"500", border=>"0"});
            } else {
                if( $plot_type eq 'heli' || $plot_type eq 'helisp' || $plot_type eq 'sgram' || $plot_type eq 'helidisp' || $plot_type eq 'infra' ) {
                    print $q->a({href=>$image_file_web}, img {src=>$image_file_web, align=>"LEFT", height=>"100%", border=>"0"});
                } else {
                    print $q->a({href=>$image_file_web}, img {src=>$image_file_web, align=>"LEFT", width=>"100%", border=>"0"});
                }
                #print $q->a({href=>$image_file_web}, img {src=>$image_file_web, align=>"LEFT", width=>$plot_width, border=>"0"});
            }
			if( $debug ) {
				print $image_file, $break;
				print $image_file_web, $break;
			}
		}
	}
}


CLOSE:


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
# End of web page
if( not $debug ) {
    print "</TT>\n";
    print $q->end_html;
}
